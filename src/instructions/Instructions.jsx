import { useState, useRef } from 'react';
import './Instructions.css';
import Step from './Step';

function Instructions() {
    const [currentStep, setCurrentStep] = useState(0); // Comienza en el paso 0, "bienvenida"

    const progressBarRef = useRef(null);

    // Funci√≥n para cambiar el currentStep
    const goToStep = (step) => {
        setCurrentStep(step);
    };

    const steps = [
        {
            title: '¬°Bienvenid@! üéâ',
            subtitle: 'Paso 0: Te damos la bienvenida',
            instructions: '¬°Estamos felices de que hayas encontrado nuestra aplicaci√≥n! A continuaci√≥n te ense√±aremos paso a paso c√≥mo hacer uso de ella.',
        },
        {
            title: 'Cuenta üéÅ',
            subtitle: 'Paso 1: Crea tu propia cuenta',
            instructions: 'Para poder empezar a hacer uso de la aplicaci√≥n, aseg√∫rate de registrarse, y posteriormente iniciar sesi√≥n. ¬°As√≠ podr√°s empezar a crear tus propias listas de deseos y m√°s!',
        },
        {
            title: 'Navegaci√≥n üß≠',
            subtitle: 'Paso 2: Conoce la barra de navegaci√≥n',
            instructions: 'A trav√©s de la barra de navegaci√≥n, tienes la posibilidad de acceder a la p√°gina de inicio, a la p√°gina de deseos, y a esta p√°gina de instrucciones.',
        },
        {
            title: 'Lista de deseos ‚ù§Ô∏è',
            subtitle: 'Paso 3: Conoce y disfruta tu lista de deseos',
            instructions: 'En la p√°gina de deseos, se encuentra tu propia lista de deseos, en la cu√°l puedes a√±adir tus regalos m√°s deseados. Guarda los regalos en tu lista para que tus amigos sepan qu√© es lo que deseas, y te lo regalen ;)',
        },
        {
            title: 'Amigos üéÇ',
            subtitle: 'Paso 4: A√±ade a tus usuarios amigos',
            instructions: '¬°A√±ade a todos tus amigos! Para que as√≠ entre ustedes conozcan los deseos del otro. Con su nombre de usuario, puedes a√±adirlos desde la p√°gina de deseos.',
        },
        {
            title: 'Regala üéÄ',
            subtitle: 'Paso 5: Reserva lo que quieres regalar',
            instructions: 'Explora las listas de deseos de tus amigos, y cuando encuentres el regalo ideal para darle, ¬°Res√©rvalo! As√≠ nadie m√°s que t√∫ llegar√° con ese regalo √∫nico y especial.',
        },
        {
            title: 'Amigo secreto üîí',
            subtitle: 'Paso 6: Organiza un amigo secreto',
            instructions: 'Organiza un amigo secreto con tus amigos, de manera que a cada uno se le asigne un regalo de la lista de deseos de otro. Todos podr√°n sorprenderse con cu√°l es el regalo de su wishlist que le llegar√°, ¬°Y qui√©n se lo dar√°!',
        }
    ];

    const totalSteps = steps.length - 1; // No se considera el paso 0

    // Funci√≥n que calcula el progreso (porcentaje) con respecto a los pasos totales
    const calculateCompletionPercentage = () => {
        return (currentStep / totalSteps) * 100;
    };

    const handleProgressBarClick = (e) => {
        // Recupero el elemento de la referencia
        const progressBar = progressBarRef.current;
        // Click en el eje X relativo a la progress-bar
        const clickX = e.clientX - progressBar.getBoundingClientRect().left;
        // (Click considerando ventana completa, menos la posici√≥n de inicio de la progress-bar)
        const progressBarWidth = progressBar.clientWidth;

        // C√°lculo del paso deseado
        const wantedStep = Math.ceil((clickX / progressBarWidth) * totalSteps);
        // (Se elige el techo (ceil), para simular el click a ese paso)

        // Modifica el currentStep
        goToStep(wantedStep);

        // IMPORTANTE: Se est√° haciendo el c√°lculo con respecto a progress-bar, no progress
        // (De lo contrario no se estar√≠a haciendo un retorno correcto)
    };

    return (
        <div className="instructions-container">
            <div
                className="progress-bar"
                ref={progressBarRef} // Este elemento es el referenciado por progressBarRef
                onClick={handleProgressBarClick} // Se gatilla la funci√≥n
            >
                <div
                    className="progress"
                    // El ancho se ajustar√° seg√∫n el progreso
                    style={{ width: `${calculateCompletionPercentage()}%` }}
                ></div>
            </div>

            <div className="instructions-content">
                {steps.map((step, index) => (
                    <Step
                        key={index}
                        id={index}
                        title={step.title}
                        subtitle={step.subtitle}
                        instructions={step.instructions}
                        current={currentStep}
                    />
                ))}
            </div>

            <div className="controls">
                {/* El bot√≥n para retroceder se muestra desde el 1er paso */}
                {currentStep > 0 && (
                    <button onClick={() => goToStep(currentStep - 1)}>Anterior</button>
                )}

                {/* El bot√≥n para avanzar se muestra hasta antes del √∫ltimo paso */}
                {currentStep < totalSteps && (
                    <button onClick={() => goToStep(currentStep + 1)}>Siguiente</button>
                )}
            </div>
        </div>
    );
}

export default Instructions;
